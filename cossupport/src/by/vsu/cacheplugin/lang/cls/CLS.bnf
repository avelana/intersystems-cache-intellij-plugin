
{
  parserClass="by.vsu.cacheplugin.lang.cls.parser.CacheObjectScriptClsParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
  psiClassPrefix="CacheObjectScriptCls"
  psiImplClassSuffix="Impl"
  psiPackage="by.vsu.cacheplugin.lang.cls.psi"
  psiImplPackage="by.vsu.cacheplugin.lang.cls.psi.impl"
 
  elementTypeHolderClass="by.vsu.cacheplugin.lang.cls.psi.CacheObjectScriptClsTypes"
  elementTypeClass="by.vsu.cacheplugin.lang.cls.psi.CacheObjectScriptClsElementType"
  tokenTypeClass="by.vsu.cacheplugin.lang.cls.psi.CacheObjectScriptClsTokenType"
}
 
cosFile ::= item_*
 
private item_ ::= (classdef|COMMENT|DESCRIPTION)

//class definition
classdef::= [includeBlock]{DESCRIPTION* COMMENT*}[importBlock] defBlock  classEntry
classEntry::=lbrace elem* rbrace
elem::=fkey| method| property| query| xdata| param| trigger| index| projection| DESCRIPTION| COMMENT
includeBlock::=(include fileList)
importBlock::=(import classList)
defBlock::=classNameBlock [extendBlock] [keywordsBlock]
classNameBlock::=class className
extendBlock::=(as className)|(extends classList)
classList::=className|{lpar (className comma)+ className rpar}
fileList::=fileName | {lpar (fileName comma)+ fileName rpar}
keywordsBlock::=lbracket(keywordItem comma)* keywordItem rbracket
keywordItem::=keyword [(eq keyword) |(eq lpar (keyword comma)+ keyword rpar)]

//foreign key definition
fkey::=fkey_keyWord fkey_Name lpar fprops rpar [fref_Word fref_Class lpar fprops rpar] [fkeyKeywordBlock] semicolon
fkeyKeywordBlock::=lbracket(fkeywordItem comma)* fkeywordItem rbracket
fkeywordItem::= fkeyword [(eq fkeyword) |(eq lpar (fkeyword comma)+ fkeyword rpar)]
fprops::= (fprop comma)* fprop

//index definition
index::= indexWord indexName on indexProps [indexKeywordBlock] indexBody
indexBody::= semicolon | lbrace rbrace
indexKeywordBlock::=lbracket(ikeywordItem comma)* ikeywordItem rbracket
ikeywordItem::= ikeyword [(eq ikeyword) |(eq lpar (ikeyword comma)+ ikeyword rpar)]
indexProps::= indexProp | lpar((indexProp comma)+ indexProp)rpar

//method definition
method::=methodWord methodName  methodArgs [retVal] [methodKeywordsBlock] methodBody
methodArgs::= lpar ([argModifier] argName argClass [eq argDefault])* rpar
argClass::=as className [argParams]
retVal::= as className [retParams]
methodKeywordsBlock::=lbracket(mkeywordItem comma)* mkeywordItem rbracket
mkeywordItem::= mkeyword [(eq mkeyword) |(eq lpar (mkeyword comma)+ mkeyword rpar)]
argParams::=lpar(argParam comma)* argParam rpar
argParam::= argKeyword [(eq argKeyword) |(eq lpar (argKeyword comma)+ argKeyword rpar)]
retParams::=lpar(retParam comma)* retParam rpar
retParam::= retKeyword [(eq retKeyword) |(eq lpar (retKeyword comma)+ retKeyword rpar)]
methodBody::= lbrace methodCode* rbrace
